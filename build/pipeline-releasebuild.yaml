
# Release builds are only manually triggered.
trigger: none
pr: none

# Create a daily midnight build for release builds on master to ensure our release builds function
schedules:
- cron: "0 0 * * *"
  displayName: Daily midnight build
  branches:
    include:
    - master

variables:
  BuildPlatform: 'any cpu'
  BuildConfiguration: 'release'
  FastRun: true

#BUILD PHASE 

stages:
- stage: MSALRelease
  jobs: #Build and stage projects
  - job: 'BuildAndStageProjects'
    pool:
        vmImage: 'windows-latest'
        demands:
        - msbuild
        - visualstudio

    steps:
    # Run pre-build code analysis (policheck, credscan, etc)
    - template: template-prebuild-code-analysis.yaml

    # Unit tests require .NET 3.x
    - task: UseDotNet@2
      displayName: 'Use .Net Core SDK 3.x'
      inputs:
        version: 3.x
        
    # Use the latest .NET SDK
    - task: UseDotNet@2
      displayName: 'Use .Net Core sdk 5.x'
      inputs:
        version: 5.x

    # Bootstrap the build
    - template: template-build-and-prep-automation.yaml

    # BUILD IOS APPCENTER APP PHASE
  - job: 'BuildiOSAppCenterApp'
    pool:
        name: Azure Pipelines
        vmImage: macos-10.15

    steps:
    - template: template-build-ios-automation.yaml

    # BUILD ANDROID APPCENTER APP PHASE
  - job: 'BuildAndroidAppCenterApp'
    pool:
        vmImage: 'windows-latest'
        demands:
        - msbuild
        - visualstudio

    steps:
    - template: template-build-android-automation.yaml

    #Desktop Unit + Integration Tests
  - job: 'RunDesktopTests'
    dependsOn:
    - 'BuildAndStageProjects'
    pool:
        vmImage: 'windows-latest'
        demands:
        - msbuild
        - visualstudio

    steps:
    # Unit tests require .NET 3.x
    - task: UseDotNet@2
      displayName: 'Use .Net Core SDK 3.x'
      inputs:
        version: 3.x

    - task: DownloadBuildArtifacts@0
      displayName: 'Download Drop'
      inputs:
        artifactName: drop
        itemPattern: '**/*'

    - task: CopyFiles@2
      displayName: 'Get MSAL tests'
      inputs:
        SourceFolder: '$(build.artifactstagingdirectory)\drop\msalTests' 
        Contents: '**\*'
        TargetFolder: $(Build.SourcesDirectory)\tests\

    - task: CopyFiles@2
      displayName: 'Get MSAL Cache Compat'
      inputs:
        SourceFolder: '$(build.artifactstagingdirectory)\drop\msalCacheTests' 
        Contents: '**\*'
        TargetFolder: $(Build.SourcesDirectory)\tests

      # Run All Desktop Tests
    - template: template-run-all-tests.yaml
      parameters:
        BuildConfiguration: '$(BuildConfiguration)'

# APP CENTER ANDROID MSAL TESTS PHASE

  - job: 'AppCenterAndroidMsalTests'
    dependsOn: 'BuildAndStageProjects'
    pool:
      vmImage: 'windows-latest'

    steps:
    - template: template-android-appcenter-tests.yaml
      parameters:
        DataFileDirectory: 'Release'

# APP CENTER IOS MSAL TESTS PHASE
  - job: 'AppCenterIosMsalTests'
    dependsOn:
    - 'BuildAndStageProjects'
    - 'BuildiOSAppCenterApp'
    pool:
      vmImage: 'windows-latest'

    steps:
    - template: template-ios-appcenter-tests.yaml
      parameters:
        DataFileDirectory: 'Release'

    #This task will initiate PKey Authentication tests on a dedicated virtual machine that has been preconfigured to allow device Authentication
    #using a dedicated lab account ("idlabca@msidlab8.com"). This machine is part of the "DevEx Win8 Automation" agent pool.
    #Because this agent pool is shared with other teams in our org, a specific agent has been assigned to this build to avoid collisions
    #and to allow teams to configure the agent as needed for their specific platform.
    #This agent ('MSIDWIN802') is configured to specifically run MSAL.NET PKey Auth tests and should be used primarily.
  - job: 'RunDeviceAuthTests'
    dependsOn: 'BuildAndStageProjects'
    pool:
        name: DevEx Win8 Automation
        demands: VisualStudio2019 -equals 2019

    steps:

    # Install KeyVault secrets
    - template: template-install-keyvault-secrets.yaml

    - template: template-run-device-auth-tests.yaml
      parameters:
        TestFilter: '$(System.ArtifactsDirectory)\drop\msalTests\Microsoft.Identity.Test.Integration.Win8\**\*'

    # Pack and sign packages
  - job: 'PackAndSign'
    dependsOn:
    - 'BuildAndStageProjects'
    # - 'AppCenterIosMsalTests'
    # - 'RunDesktopTests'
    pool:
        vmImage: 'windows-latest'
        demands:
        - msbuild
        - visualstudio

    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Drop'
      inputs:
        artifactName: drop
        itemPattern: '**/*'

    - task: CopyFiles@2
      displayName: 'Get MSAL src'
      inputs:
        SourceFolder: '$(build.artifactstagingdirectory)\drop\msalSrc'
        Contents: '**\*'
        TargetFolder: $(Build.SourcesDirectory)\src\client

    # Use the latest .NET SDK
    - task: UseDotNet@2
      displayName: 'Use .Net Core sdk 5.x'
      inputs:
        version: 5.x

    - task: VSBuild@1
      displayName: 'NuGet restore'
      inputs:
        solution: 'LibsAndSamples.sln'
        msbuildArgs: '/t:restore'
        platform: 'any cpu'
        configuration: 'debug'

    # Run Post-build code analysis (e.g. Roslyn)
    - template: template-postbuild-code-analysis.yaml

    # Pack and sign all of the nuget packages
    # Required for the signing task, but does not need to be used
    - task: UseDotNet@2
      displayName: 'Use .Net Core SDK 2.x'
      inputs:
        version: 2.x

    - template: template-pack-and-sign-all-nugets.yaml

    # Publish nuget packages and symbols to VSTS package manager.
    - template: template-publish-packages-and-symbols.yaml

    # Publish analysis and cleanup
    - template: template-publish-analysis-and-cleanup.yaml