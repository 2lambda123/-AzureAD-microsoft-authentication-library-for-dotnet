# template-OneBranch-CI-libsandsamples.yaml
# Performs Nuget Restore and Build of LibsAndSamples.sln based on BuildPlatform and BuildConfiguration

parameters:
  BuildPlatform: 'any cpu'
  BuildConfiguration: 'release'
  MsalClientSemVer: '4.0.0-devopsbuild'
  MsalSourceDir: 'microsoft-authentication-library-for-dotnet\' #Default MSAL Location

steps:
- task: CmdLine@2
  displayName: 'Clear local NuGet cache'
  inputs:
    script: 'nuget locals all -clear'

# Task to disable an public NuGet source
- task: CmdLine@2
  displayName: 'Disable Public NuGet source'
  inputs:
    script: 'dotnet nuget disable source NuGet --configfile "$(MsalSourceDir)NuGet.Config"'

# Task to add a OneBranch NuGet source
- task: CmdLine@2
  displayName: 'Add OneBranch NuGet source'
  inputs:
    script: |
      dotnet nuget add source "https://identitydivision.pkgs.visualstudio.com/IDDP/_packaging/authsdkinternalfeed/nuget/v3/index.json" --name authsdkinternalfeed
      
- task: PowerShell@2
  displayName: 'Install Android'
  inputs:
    filePath: '$(MsalSourceDir)build\InstallAndroid.ps1'
    arguments: '-ExecutionPolicy Bypass'
      
- task: VSBuild@1
  displayName: 'NuGet restore ${{ parameters.Solution }}'
  inputs:
    solution: ${{ parameters.Solution }}
    msbuildArgs: '/t:restore'
    platform: ${{ parameters.BuildPlatform }}
    configuration: ${{ parameters.BuildConfiguration }}

- task: VSBuild@1
  displayName: 'Build solution ${{ parameters.Solution }}'
  inputs:
    solution: ${{ parameters.Solution }}
    msbuildArgs: '/p:RunCodeAnalysis=false /p:MsalClientSemVer=${{ parameters.MsalClientSemVer }} /p:SourceLinkCreate=true /p:ContinousIntegrationBuild=true'
    platform: ${{ parameters.BuildPlatform }}
    configuration: ${{ parameters.BuildConfiguration }}

- powershell: 'powershell.exe -File "$(MsalSourceDir)build\installEdgeDriver.ps1" -ExecutionPolicy Bypass'
  displayName: 'Install EdgeDriver'

  # Run All Desktop Tests
- template: template-run-all-tests.yaml
  parameters:
    BuildConfiguration: '$(BuildConfiguration)'

- task: VSTest@2
  displayName: 'Run cache compat tests'
  condition: and(succeeded(), eq(variables['RunTests'], 'true'))
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: '**\CacheCompat\CommonCache.Test.Unit\bin\**\CommonCache.Test.Unit.dll'
    searchFolder: '$(System.DefaultWorkingDirectory)'
    codeCoverageEnabled: true
    failOnMinTestsNotRun: true
    minimumExpectedTests: '1'
    runInParallel: true
