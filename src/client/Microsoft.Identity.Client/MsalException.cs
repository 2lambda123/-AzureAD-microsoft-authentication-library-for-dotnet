// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

using System;
using System.Collections.Generic;
using System.Globalization;
using Microsoft.Identity.Client.Internal;
using Microsoft.Identity.Client.PlatformsCommon.Factories;
using Microsoft.Identity.Client.Utils;
#if SUPPORTS_SYSTEM_TEXT_JSON
using System.Text.Json.Nodes;
using JObject = System.Text.Json.Nodes.JsonObject;
#else
using Microsoft.Identity.Json;
using Microsoft.Identity.Json.Linq;
#endif

namespace Microsoft.Identity.Client
{
    /// <summary>
    /// Base exception type thrown when an error occurs during token acquisition.
    /// For more details, see https://aka.ms/msal-net-exceptions
    /// </summary>
    /// <remarks>Avoid throwing this exception. Instead throw the more specialized <see cref="MsalClientException"/>
    /// or <see cref="MsalServiceException"/>
    /// </remarks>
    public class MsalException : Exception
    {
        /// <summary>
        /// An <see cref="AdditionalExceptionData"/> property key, available when using desktop brokers.
        /// </summary>
        public const string BrokerErrorContext = "BrokerErrorContext";
        /// <summary>
        /// An <see cref="AdditionalExceptionData"/> property key, available when using desktop brokers.
        /// </summary>
        public const string BrokerErrorTag = "BrokerErrorTag";
        /// <summary>
        /// An <see cref="AdditionalExceptionData"/> property key, available when using desktop brokers.
        /// </summary>
        public const string BrokerErrorStatus = "BrokerErrorStatus";
        /// <summary>
        /// An <see cref="AdditionalExceptionData"/> property key, available when using desktop brokers.
        /// </summary>
        public const string BrokerErrorCode = "BrokerErrorCode";
        /// <summary>
        /// An <see cref="AdditionalExceptionData"/> property key, available when using desktop brokers.
        /// </summary>
        public const string BrokerTelemetry = "BrokerTelemetry";

        private string _errorCode;

        /// <summary>
        /// Indicates if the previous operation that resulted in this exception should be retried.
        /// </summary>
        public bool IsRetryable { get; set; }

        /// <summary>
        /// Initializes a new instance of the exception class.
        /// </summary>
        public MsalException()
            : base(MsalErrorMessage.Unknown)
        {
            ErrorCode = MsalError.UnknownError;
        }

        /// <summary>
        /// Initializes a new instance of the exception class with a specified
        /// error code.
        /// </summary>
        /// <param name="errorCode">
        /// The error code returned by the service or generated by the client. This is the code you can rely on
        /// for exception handling.
        /// </param>
        public MsalException(string errorCode)
        {
            ErrorCode = errorCode;
        }

        /// <summary>
        /// Initializes a new instance of the exception class with a specified
        /// error code and error message.
        /// </summary>
        /// <param name="errorCode">
        /// The error code returned by the service or generated by the client. This is the code you can rely on
        /// for exception handling.
        /// </param>
        /// <param name="errorMessage">The error message that explains the reason for the exception.</param>
        public MsalException(string errorCode, string errorMessage)
            : base(errorMessage)
        {
            if (string.IsNullOrWhiteSpace(Message))
            {
                throw new ArgumentNullException(nameof(errorMessage));
            }
            ErrorCode = errorCode;
        }

        /// <summary>
        /// Initializes a new instance of the exception class with a specified
        /// error code and a reference to the inner exception that is the cause of
        /// this exception.
        /// </summary>
        /// <param name="errorCode">
        /// The error code returned by the service or generated by the client. This is the code you can rely on
        /// for exception handling.
        /// </param>
        /// <param name="errorMessage">The error message that explains the reason for the exception.</param>
        /// <param name="innerException">
        /// The exception that is the cause of the current exception, or a null reference if no inner
        /// exception is specified.
        /// </param>
        public MsalException(string errorCode, string errorMessage, Exception innerException)
            : base(errorMessage, innerException)
        {
            if (string.IsNullOrWhiteSpace(Message))
            {
                throw new ArgumentNullException(nameof(errorMessage));
            }

            ErrorCode = errorCode;
        }

        /// <summary>
        /// Gets the protocol error code returned by the service or generated by the client. This is the code you can rely on for
        /// exception handling. Values for this code are typically provided in constant strings in the derived exceptions types
        /// with explanations of mitigation.
        /// </summary>
        public string ErrorCode
        {
            get => _errorCode;
            private set
            {
                _errorCode = string.IsNullOrWhiteSpace(value) ?
                    throw new ArgumentNullException("ErrorCode") :
                    value;
            }
        }

        /// <summary>
        /// A property bag with extra details for this exception.
        /// </summary>
        public IReadOnlyDictionary<string, string> AdditionalExceptionData { get; set; }
            = CollectionHelpers.GetEmptyDictionary<string, string>();

        /// <summary>
        /// Creates and returns a string representation of the current exception.
        /// </summary>
        /// <returns>A string representation of the current exception.</returns>
        public override string ToString()
        {
            string msalProductName = PlatformProxyFactory.CreatePlatformProxy(null).GetProductName();
            string msalVersion = MsalIdHelper.GetMsalVersion();

            string innerExceptionContents = InnerException == null
                ? string.Empty
                : string.Format(CultureInfo.InvariantCulture, "\nInner Exception: {0}", InnerException.ToString());

            return string.Format(
                CultureInfo.InvariantCulture,
                "{0}.{1}.{2}: \n\tErrorCode: {3}\n{4}{5}",
                msalProductName,
                msalVersion,
                GetType().Name,
                ErrorCode,
                base.ToString(),
                innerExceptionContents);
        }

        #region SERIALIZATION

        // DEPRECATE / OBSOLETE - this functionality is not used and should be removed in a next major version

        private const string ExceptionTypeKey = "type";
        private const string ErrorCodeKey = "error_code";
        private const string ErrorDescriptionKey = "error_description";

        internal virtual void PopulateJson(JObject jObject)
        {
            jObject[ExceptionTypeKey] = GetType().Name;
            jObject[ErrorCodeKey] = ErrorCode;
            jObject[ErrorDescriptionKey] = Message;

#if SUPPORTS_SYSTEM_TEXT_JSON
            var exceptionData = new JsonObject();

            foreach (KeyValuePair<string, string> pair in AdditionalExceptionData)
            {
                exceptionData[pair.Key] = pair.Value;
            }

            jObject[nameof(AdditionalExceptionData)] = exceptionData;
#else
            jObject[nameof(AdditionalExceptionData)] = JObject.FromObject(AdditionalExceptionData);
#endif

            //if (AdditionalExceptionData.TryGetValue(BrokerErrorContext, out string brokerErrorContext))
            //{
            //    jObject[BrokerErrorContext] = brokerErrorContext;
            //}
            //if (AdditionalExceptionData.TryGetValue(BrokerErrorTag, out string brokerErrorTag))
            //{
            //    jObject[BrokerErrorTag] = brokerErrorTag;
            //}
            //if (AdditionalExceptionData.TryGetValue(BrokerErrorStatus, out string brokerErrorStatus))
            //{
            //    jObject[BrokerErrorStatus] = brokerErrorStatus;
            //}
            //if (AdditionalExceptionData.TryGetValue(BrokerErrorCode, out string brokerErrorCode))
            //{
            //    jObject[BrokerErrorCode] = brokerErrorCode;
            //}
            //if (AdditionalExceptionData.TryGetValue(BrokerTelemetry, out string brokerTelemetry))
            //{
            //    jObject[BrokerTelemetry] = brokerTelemetry;
            //}
        }

        internal virtual void PopulateObjectFromJson(JObject jObject)
        {
            AdditionalExceptionData = (IReadOnlyDictionary<string, string>)JsonHelper.ExtractInnerJsonAsDictionary(jObject, nameof(AdditionalExceptionData));
        }

        /// <summary>
        /// Allows serialization of most values of the exception into JSON.
        /// </summary>
        /// <returns></returns>
        public string ToJsonString()
        {
            JObject jObject = new JObject();
            PopulateJson(jObject);
            return jObject.ToString();
        }

        /// <summary>
        /// Allows re-hydration of the MsalException (or one of its derived types) from JSON generated by ToJsonString().
        /// </summary>
        /// <param name="json"></param>
        /// <returns></returns>
        public static MsalException FromJsonString(string json)
        {
            JObject jObject = JsonHelper.ParseIntoJsonObject(json);
            string type = JsonHelper.GetValue<string>(jObject[ExceptionTypeKey]);

            string errorCode = JsonHelper.GetExistingOrEmptyString(jObject, ErrorCodeKey);
            string errorMessage = JsonHelper.GetExistingOrEmptyString(jObject, ErrorDescriptionKey);

            MsalException ex = type switch
            {
                nameof(MsalException) => new MsalException(errorCode, errorMessage),
                nameof(MsalClientException) => new MsalClientException(errorCode, errorMessage),
                nameof(MsalServiceException) => new MsalServiceException(errorCode, errorMessage),
                nameof(MsalUiRequiredException) => new MsalUiRequiredException(errorCode, errorMessage),
                _ => throw new MsalClientException(MsalError.JsonParseError, MsalErrorMessage.MsalExceptionFailedToParse),
            };

            ex.PopulateObjectFromJson(jObject);
            return ex;
        }

        #endregion // SERIALIZATION
    }
}
